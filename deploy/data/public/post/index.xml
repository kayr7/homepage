<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Kay Rottmann</title>
    <link>https://kay-rottmann.de/post/</link>
    <description>Recent content in Posts on Kay Rottmann</description>
    <generator>Source Themes academia (https://sourcethemes.com/academic/)</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 29 Apr 2020 00:00:00 +0000</lastBuildDate>
    
	    <atom:link href="https://kay-rottmann.de/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Modeling Covid-19 infections with Bayesian inference</title>
      <link>https://kay-rottmann.de/post/jupyter/</link>
      <pubDate>Wed, 29 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://kay-rottmann.de/post/jupyter/</guid>
      <description>&lt;h1 id=&#34;trying-out-bayesian-inference-with-pymc3-on-covid-data&#34;&gt;Trying out Bayesian inference with PyMC3 on covid data&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: this is in no way intended to be relied on!&lt;/em&gt;
&lt;em&gt;I&amp;rsquo;m neither an expert in pandemics, and I&amp;rsquo;m just trying to understand and learn Bayesian Inference better.
This was done purely for me to learn something new&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;It doesn&amp;rsquo;t respect reactions of the countries, it doesn&amp;rsquo;t respect the testing capabilities / numbers in the countries, it doesn&amp;rsquo;t respect real biological models and past research in the field of virology and pandemics.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pymc3 &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pm
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; numpy &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; np
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; plt
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; matplotlib.ticker &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; StrMethodFormatter
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; seaborn &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; sns
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; pandas &lt;span style=&#34;color:#f92672&#34;&gt;as&lt;/span&gt; pd
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; theano
&lt;span style=&#34;color:#f92672&#34;&gt;%&lt;/span&gt;matplotlib inline
&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; warnings
&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; scipy.stats &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; halfnorm
warnings&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;filterwarnings(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;ignore&amp;#39;&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;WARNING (theano.tensor.blas): Using NumPy C-API based implementation for BLAS functions.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;data-based-on-a-dump-from-a-wiki-page-offering-country-specific-infections&#34;&gt;Data based on a dump from a wiki page offering country specific infections.&lt;/h3&gt;
&lt;p&gt;Data is a snapshot form Kaggle taken from around mid April 2020 and wasn&amp;rsquo;t updated since!&lt;/p&gt;
&lt;p&gt;To make the data more representative, days before 2000 infections were reached were removed, since there might have been just single hotspots that were under control, also only those timeseries were looked at, that had in it&amp;rsquo;s current state more than 20.000 infections counted.
Furthermore the data was restricted to series of at least 10 days.
These restrictions allow to look at a smaller set.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;infections &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {}

MIN_DATES &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; open(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;untitled1.txt&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;r&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; csv:
    intermediate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
    counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
    
    &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; line &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; csv:
        
        line &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;strip()&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;,&amp;#39;&lt;/span&gt;)
        country &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; line[&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;+&lt;/span&gt;line[&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;]
        infection &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(float(line[&lt;span style=&#34;color:#ae81ff&#34;&gt;4&lt;/span&gt;]))
        deaths &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; int(float(line[&lt;span style=&#34;color:#ae81ff&#34;&gt;5&lt;/span&gt;]))
&lt;span style=&#34;color:#75715e&#34;&gt;#        print(line)&lt;/span&gt;
                
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; infection &lt;span style=&#34;color:#f92672&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2000&lt;/span&gt;:
            &lt;span style=&#34;color:#66d9ef&#34;&gt;continue&lt;/span&gt;
        &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; country &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; countries:
            countries[country] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            counter &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;
            &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(intermediate) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; MIN_DATES &lt;span style=&#34;color:#f92672&#34;&gt;and&lt;/span&gt; intermediate[&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;][&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;:
                &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; intermediate:
                    infections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)
                
            intermediate &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; []
        counter &lt;span style=&#34;color:#f92672&#34;&gt;+=&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;
        intermediate&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append([country, counter, infection, deaths])
    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; len(intermediate) &lt;span style=&#34;color:#f92672&#34;&gt;&amp;gt;&lt;/span&gt; MIN_DATES:
        &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; intermediate:
            infections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;append(i)


        
full_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; None
full_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pd&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;DataFrame(infections, columns&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;infections&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;])
full_df &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype({&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;day&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;infections&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;deaths&amp;#39;&lt;/span&gt;: &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;})

&lt;span style=&#34;color:#75715e&#34;&gt;#filters = full_df.country.apply(lambda x: x in [&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#        &amp;#39;China&amp;#39;, &amp;#39;Germany&amp;#39;, &amp;#39;Japan&amp;#39;, &amp;#39;South Korea&amp;#39;, &amp;#39;France&amp;#39;, &amp;#39;Netherlands&amp;#39;])&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#full_df=full_df[filters]&lt;/span&gt;
countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values
uniq_countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;unique()
n_countries &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; len(uniq_countries)

full_df[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;country_idx&amp;#39;&lt;/span&gt;] &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; [list(uniq_countries)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;index(x) &lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; x &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; countries]
&lt;span style=&#34;color:#75715e&#34;&gt;#print(full_df.country_idx)&lt;/span&gt;
&lt;span style=&#34;color:#75715e&#34;&gt;#print(full_df)&lt;/span&gt;
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(list(enumerate(uniq_countries)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[(0, &#39;Belgium-&#39;), (1, &#39;Brazil-&#39;), (2, &#39;Canada-Quebec&#39;), (3, &#39;China-Hubei&#39;), (4, &#39;Ecuador-&#39;), (5, &#39;France-&#39;), (6, &#39;Germany-&#39;), (7, &#39;India-&#39;), (8, &#39;Iran-&#39;), (9, &#39;Italy-&#39;), (10, &#39;Netherlands-&#39;), (11, &#39;Peru-&#39;), (12, &#39;Portugal-&#39;), (13, &#39;Russia-&#39;), (14, &#39;Spain-&#39;), (15, &#39;Switzerland-&#39;), (16, &#39;Turkey-&#39;), (17, &#39;US-California&#39;), (18, &#39;US-Connecticut&#39;), (19, &#39;US-Florida&#39;), (20, &#39;US-Georgia&#39;), (21, &#39;US-Illinois&#39;), (22, &#39;US-Louisiana&#39;), (23, &#39;US-Massachusetts&#39;), (24, &#39;US-Michigan&#39;), (25, &#39;US-New Jersey&#39;), (26, &#39;US-New York&#39;), (27, &#39;US-Pennsylvania&#39;), (28, &#39;US-Texas&#39;), (29, &#39;United Kingdom-&#39;)]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;here-is-the-modeling-part&#34;&gt;here is the modeling part&lt;/h3&gt;
&lt;p&gt;the base idea is to fit a sigmoid like function to model the number of total infections. This assumption alone is probably already enough reason to not trust any output of this model. So &lt;em&gt;please don&amp;rsquo;t trust&lt;/em&gt; the model.&lt;/p&gt;
&lt;p&gt;Instead of using the regular sigmoid, I chose the &lt;em&gt;Gompertz Function&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;\begin{equation}
\large{
f(x) = a \cdot e^{b \cdot e^{c \cdot x} }
}
\end{equation}&lt;/p&gt;
&lt;p&gt;The reason for using the Gompertz function is it&amp;rsquo;s assymmetrie, allowing to adjust for the exponential increase ans slow down phases.
with $b, c &amp;lt; 0$ the value of $a$ determines the upper limit and therefore in our investigation the upper limit of infections.
$b$ and $c$ determine the speeed and acceleration.&lt;/p&gt;
&lt;p&gt;To have some benefit from all the past countries, I tried to model $b$ and $c$ hierarchical, having a &amp;ldquo;mean value&amp;rdquo; across all time series, and the individual time series deviates from this according to a small normal distribution. The idea is, to have estimates for how things will develop even when very little hints are in the data.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; theano &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shared
predictors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;day&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
predictors_shared &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shared(predictors)
country_id &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
country_idx &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shared(country_id)


&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; theano &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; shared
predictors &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;day&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
predictors_shared &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; shared(predictors)



&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; scipy
&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Model() &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; model:
    
    a &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Uniform(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;, lower&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000&lt;/span&gt;, upper&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1000000&lt;/span&gt;, shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n_countries)
    b_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Uniform(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b_base&amp;#39;&lt;/span&gt;, lower&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;8&lt;/span&gt;, upper&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;)
    b &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Normal(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;, mu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;b_base, sigma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n_countries)
    c_base &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Uniform(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c_base&amp;#39;&lt;/span&gt;, lower&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, upper&lt;span style=&#34;color:#f92672&#34;&gt;=-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.00001&lt;/span&gt;)
    c &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Normal(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;, mu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;c_base, sigma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0.03&lt;/span&gt;, shape&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;n_countries)
    
    y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; (a[country_idx] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(b[country_idx] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;math&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;exp(c[country_idx] &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; (predictors_shared))))
    obs &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;Normal(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obs&amp;#39;&lt;/span&gt;, mu&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;y, sigma&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;5000&lt;/span&gt;, observed&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infections&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;values)

    trace &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sample(&lt;span style=&#34;color:#ae81ff&#34;&gt;20000&lt;/span&gt;, cores&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;)
    
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;now-plotting-the-results-of-the-fittings&#34;&gt;Now plotting the results of the fittings&lt;/h3&gt;
&lt;p&gt;The fittings did not work out very well, we will see why when we look at the traces.&lt;/p&gt;
&lt;p&gt;We can see some pretty wide confidence intervals, so like the output suggested it didn&amp;rsquo;t work out too well.
Interestingly this is especially then the case, when the counts haven&amp;rsquo;t turned into the slow down phase where the infections are under control. This also makes sense, because the model has to guess which kind of behavior it will see when the infections get under control, without having any hints on it.
But here is the hierarchical model at least helping a bit, interpolating from overal behavior of the infections to the individual case.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#f92672&#34;&gt;from&lt;/span&gt; pymc3 &lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; forestplot

plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;20&lt;/span&gt;))
forestplot(trace, var_names&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;])
forestplot(trace, var_names&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;])
forestplot(trace, var_names&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;])

pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;traceplot(trace)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(list(enumerate(uniq_countries)))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;[(0, &#39;Belgium-&#39;), (1, &#39;Brazil-&#39;), (2, &#39;Canada-Quebec&#39;), (3, &#39;China-Hubei&#39;), (4, &#39;Ecuador-&#39;), (5, &#39;France-&#39;), (6, &#39;Germany-&#39;), (7, &#39;India-&#39;), (8, &#39;Iran-&#39;), (9, &#39;Italy-&#39;), (10, &#39;Netherlands-&#39;), (11, &#39;Peru-&#39;), (12, &#39;Portugal-&#39;), (13, &#39;Russia-&#39;), (14, &#39;Spain-&#39;), (15, &#39;Switzerland-&#39;), (16, &#39;Turkey-&#39;), (17, &#39;US-California&#39;), (18, &#39;US-Connecticut&#39;), (19, &#39;US-Florida&#39;), (20, &#39;US-Georgia&#39;), (21, &#39;US-Illinois&#39;), (22, &#39;US-Louisiana&#39;), (23, &#39;US-Massachusetts&#39;), (24, &#39;US-Michigan&#39;), (25, &#39;US-New Jersey&#39;), (26, &#39;US-New York&#39;), (27, &#39;US-Pennsylvania&#39;), (28, &#39;US-Texas&#39;), (29, &#39;United Kingdom-&#39;)]



&amp;lt;Figure size 1440x1440 with 0 Axes&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img src=&#34;output_7_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_7_3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_7_4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_7_5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;now-predicting-the-future&#34;&gt;now predicting the future&amp;hellip;&lt;/h3&gt;
&lt;p&gt;the traceplot above show what we already assumed, had some issues, especially the base values of c and b didn&amp;rsquo;t fully converge to a single distribution, normally you would do a reparametrization and probably increase tuning steps to fix this.
But still let us try to now use the found model parameters to simulate how it&amp;rsquo;s going to continue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#75715e&#34;&gt;#ppc = pm.sample_posterior_predictive(trace, samples=500, model=model)&lt;/span&gt;
x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;tile(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;), n_countries)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(len(x))
predictors_shared&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_value(x)

y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;repeat(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;,n_countries&lt;span style=&#34;color:#f92672&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,n_countries)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;astype(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;int32&amp;#39;&lt;/span&gt;), &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;print&lt;/span&gt;(len(y))
country_idx&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;set_value(y)

&lt;span style=&#34;color:#66d9ef&#34;&gt;with&lt;/span&gt; model:
    post_pred &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; pm&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;sample_posterior_predictive(trace, samples&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;10000&lt;/span&gt;)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;pre&gt;&lt;code&gt;  0%|          | 35/10000 [00:00&amp;lt;00:28, 345.46it/s]

3000
3000


100%|██████████| 10000/10000 [00:18&amp;lt;00:00, 532.00it/s]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;looking-at-fittings-and-predictions&#34;&gt;looking at fittings and predictions&lt;/h3&gt;
&lt;p&gt;What we can actually see is that the model fitted the given points quite ok, but the predictions have quite a lot uncertainty. Especially in those cases, where there is little hint as to how much the region was able to slow down.
So again don&amp;rsquo;t rely on this model for anything.
This was done purely as an educational exercise.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
means &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; post_pred[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obs&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;mean(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;, keepdims&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;False)&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;copy()
stds &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; post_pred[&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;obs&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;std(axis&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#ae81ff&#34;&gt;0&lt;/span&gt;)
&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; i &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; range(n_countries):
    choice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; y&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i
    old_choice &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;country_idx&lt;span style=&#34;color:#f92672&#34;&gt;==&lt;/span&gt;i

    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;figure(figsize&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;(&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;))
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;errorbar(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;,&lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;),
                 means[choice],
                 stds[choice],
                 linestyle&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;None&amp;#39;&lt;/span&gt;,
                 marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;plot(np&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;linspace(&lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;,len(full_df[old_choice]), len(full_df[old_choice])),
             full_df&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;infections[old_choice],
             marker&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#39;o&amp;#39;&lt;/span&gt;)
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;title(uniq_countries[i])
    plt&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;show()




&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;img src=&#34;output_11_0.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_1.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_2.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_3.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_4.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_5.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_6.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_7.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_8.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_9.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_10.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_11.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_12.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_13.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_14.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_15.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_16.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_17.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_18.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_19.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_20.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_21.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_22.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_23.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_24.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_25.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_26.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_27.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_28.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;output_11_29.png&#34; alt=&#34;png&#34;&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>
